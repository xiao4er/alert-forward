apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
    meta.helm.sh/release-name: autocv
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2023-07-31T05:03:44Z"
  generation: 3
  labels:
    app.kubernetes.io/instance: autocv
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: autocv-vision
    app.kubernetes.io/version: 22.12.2-rc0
    base.component: autocv-mmgw
    helm.sh/chart: vision-22.12.2-rc0
    io.transwarp.aip.service: autocv-mmgw
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:app.kubernetes.io/version: {}
          f:base.component: {}
          f:helm.sh/chart: {}
          f:io.transwarp.aip.service: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:io.transwarp.aip.service: {}
        f:strategy:
          f:type: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:io.transwarp.aip.service: {}
          f:spec:
            f:containers:
              k:{"name":"mmgw"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"HOST_IP_ADDR"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:fieldRef:
                        .: {}
                        f:apiVersion: {}
                        f:fieldPath: {}
                  k:{"name":"RTP_SERVERS"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":1935,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                  k:{"containerPort":1985,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                  k:{"containerPort":5060,"protocol":"UDP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                  k:{"containerPort":18080,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                  k:{"containerPort":30900,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:resources: {}
                f:securityContext:
                  .: {}
                  f:privileged: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/dev"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/tmp/bin"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/usr/local/srs/conf/srs.conf"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/usr/local/srs/data/store/videos"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/usr/local/srs/objs/ffmpeg_log"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/usr/local/srs/objs/nginx/html/preview"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:serviceAccount: {}
            f:serviceAccountName: {}
            f:terminationGracePeriodSeconds: {}
            f:volumes:
              .: {}
              k:{"name":"host-dev"}:
                .: {}
                f:hostPath:
                  .: {}
                  f:path: {}
                  f:type: {}
                f:name: {}
              k:{"name":"mmgw-volume"}:
                .: {}
                f:name: {}
                f:persistentVolumeClaim:
                  .: {}
                  f:claimName: {}
              k:{"name":"srs-conf"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:items: {}
                  f:name: {}
                f:name: {}
    manager: helm
    operation: Update
    time: "2023-07-31T05:03:44Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:spec:
            f:containers:
              k:{"name":"mmgw"}:
                f:args: {}
    manager: kubectl-edit
    operation: Update
    time: "2024-01-15T13:08:10Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:spec:
            f:containers:
              k:{"name":"mmgw"}:
                f:image: {}
    manager: kubectl-set
    operation: Update
    time: "2024-01-15T13:08:17Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:deployment.kubernetes.io/revision: {}
      f:status:
        f:availableReplicas: {}
        f:conditions:
          .: {}
          k:{"type":"Available"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Progressing"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updatedReplicas: {}
    manager: k3s
    operation: Update
  name: autocv-mmgw
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      io.transwarp.aip.service: autocv-mmgw
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.transwarp.aip.service: autocv-mmgw
    spec:
      containers:
      - args:
        - /bin/bash
        - -c
        - ./objs/srs -c conf/srs.conf
        env:
        - name: HOST_IP_ADDR
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: RTP_SERVERS
          value: $(HOST_IP_ADDR):30901,$(AUTOCV_RTPGW_R1_SERVICE_SERVICE_HOST):1935
        image: xiao4er/aio:mmgw-jetson-1129
        imagePullPolicy: IfNotPresent
        name: mmgw
        ports:
        - containerPort: 18080
          name: mmgw-flv
          protocol: TCP
        - containerPort: 1935
          name: mmgw-rtmp
          protocol: TCP
        - containerPort: 1985
          name: mmgw-api
          protocol: TCP
        - containerPort: 5060
          name: mmgw-sip
          protocol: UDP
        - containerPort: 30900
          name: mmgw-rtp
          protocol: TCP
        resources: {}
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/local/srs/conf/srs.conf
          name: srs-conf
          subPath: srs.conf
        - mountPath: /dev
          name: host-dev
        - mountPath: /usr/local/srs/data/store/videos
          name: mmgw-volume
          subPath: vision/store/videos
        - mountPath: /usr/local/srs/objs/nginx/html/preview
          name: mmgw-volume
          subPath: vision/store/records
        - mountPath: /usr/local/srs/objs/ffmpeg_log
          name: mmgw-volume
          subPath: vision/store/ffmpeg_logs
        - mountPath: /tmp/bin
          name: mmgw-volume
          subPath: share/bin
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: autocv-admin
      serviceAccountName: autocv-admin
      terminationGracePeriodSeconds: 3
      volumes:
      - name: mmgw-volume
        persistentVolumeClaim:
          claimName: autocv-pvc
      - hostPath:
          path: /dev
          type: ""
        name: host-dev
      - configMap:
          defaultMode: 420
          items:
          - key: mmgw-conf
            path: srs.conf
          name: mmgw-configmap
        name: srs-conf
