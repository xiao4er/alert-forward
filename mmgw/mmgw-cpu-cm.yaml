apiVersion: v1
data:
  mmgw-conf: |
    # main config for srs.
    # @see full.conf for detail config.

    listen              1935;
    max_connections     1000;
    daemon              off;
    srs_log_tank        console;
    ff_log_dir          ./objs/ffmpeg_log;
    srs_log_level       trace;
    # srs_log_file        ./objs/srs.log;
    http_api {
        enabled         on;
        listen          1985;
        raw_api {
            enabled             on;
            allow_reload        on;
            allow_query         on;
            allow_update        on;
        }
    }
    http_server {
        enabled         on;
        listen          18080;
        dir             ./objs/nginx/html;
    }
    stats {
        network         0;
        disk            sda sdb xvda xvdb;
    }


    stream_caster {
        enabled             on;
        caster              gb28181;

        # 转发流到rtmp服务器地址与端口
        # TODO: https://github.com/ossrs/srs/pull/1679/files#r400875104
        # [stream] is VideoChannelCodecID(视频通道编码ID) for sip
        # 自动创建的道通[stream] 是‘chid[ssrc]’ [ssrc]是rtp的ssrc
        # [ssrc] rtp中的ssrc
        output              rtmp://127.0.0.1:1935/live/[stream];

        # 接收设备端rtp流的多路复用端口
        listen              30900;

        # rtp接收监听端口范围，最小值
        rtp_port_min        58200;
        # rtp接收监听端口范围，最大值
        rtp_port_max        58300;

        # 多路复用端口类型，on为tcp，off为udp
        # 默认：on
        tcp_enable            on;

        # 是否等待关键帧之后，再转发，
        # off:不需等待，直接转发
        # on:等第一个关键帧后，再转发
        wait_keyframe       off;

        # rtp包空闲等待时间，如果指定时间没有收到任何包
        # rtp监听连接自动停止，发送BYE命令
        rtp_idle_timeout    60;

        # 是否转发音频流
        # 目前只支持aac格式，所以需要设备支持aac格式
        # on:转发音频
        # off:不转发音频，只有视频
        # *注意*!!!:flv 只支持11025  22050  44100 三种
        # 如果设备端没有三种中任何一个，转发时为自动选择一种格式
        # 同时也会将adts的头封装在flv aac raw数据中
        # 这样的话播放器为自动通过adts头自动选择采样频率
        # 像ffplay, vlc都可以，但是flash是没有声音，
        # 因为flash,只支持11025 22050 44100
        audio_enable        off;

        # 是否开启rtp缓冲
        # 开启之后能有效解决rtp乱序等问题
        jitterbuffer_enable  on;

        # 服务器主机号，可以域名或ip地址
        # 也就是设备端将媒体发送的地址，如果是服务器是内外网
        # 需要写外网地址，
        # 调用api创建stream session时返回ip地址也是host
        # $CANDIDATE 是系统环境变量，从环境变量获取地址，如果没有配置，用*
        # *代表指定stats network 的网卡号地址，如果没有配置network，默认则是第0号网卡地址
        # TODO: https://github.com/ossrs/srs/pull/1679/files#r400917594
        host       $HOST_IP_ADDR;

        #根据收到ps rtp包自带创建rtmp媒体通道，不需要api接口创建
        #rtmp地址参数[stream] 就是通道id  格式chid[ssrc]
        auto_create_channel   off;

        sip {
            # 是否启用srs内部sip信令
            # 为on信令走srs, off 只转发ps流
            enabled on;

            # sip监听udp端口
            listen              5060;

            # SIP server ID(SIP服务器ID).
            # 设备端配置编号需要与该值一致，否则无法注册
            serial              34020000002000000042;

            # SIP server domain(SIP服务器域)
            realm               3402000000;

            # 服务端发送ack后，接收回应的超时时间，单位为秒
            # 如果指定时间没有回应，认为失败
            ack_timeout         30;

            # 设备心跳维持时间，如果指定时间内(秒）没有接收一个心跳
            # 认为设备离线
            keepalive_timeout   120;

            # 注册之后是否自动给设备端发送invite
            # on: 是  off 不是，需要通过api控制
            auto_play           off;

            # 自动邀请间隔
            # 在auto_play = on时生效。
            auto_invite_interval   60;
            # 设备将流发送的端口，是否固定
            # on 发送流到多路复用端口 如9000
            # off 自动从rtp_mix_port - rtp_max_port 之间的值中
            # 选一个可以用的端口
            invite_port_fixed     on;

            # 向设备或下级域查询设备列表的间隔，单位(秒)
            # 默认60秒
            query_catalog_interval  60;
        }
    }

    vhost __defaultVhost__ {
      http_remux {
        enabled     on;
        mount       [vhost]/[app]/[stream].flv;
        hstrs       on;
      }

      ingest rtsp_template {
          enabled      off;
          input {
              type    file;
              url     ./doc/source.200kbps.768x320.flv;
          }
          ffmpeg      ./objs/ffmpeg/bin/ffmpeg;

          engine {
              enabled         on;
              perfile {
                  re;
                  rtsp_transport tcp;
              }
              vcodec          libx264;
              vbitrate        2000;
              vthreads        4;
              vprofile        baseline;
              vpreset         veryfast;
              vfps            10;
              vparams {
                bf              0;
                refs            5;
              }
              acodec          an;
              oformat         flv;
              output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream];
          }
      }

      ingest v4l2_template {
          enabled      off;
          input {
              type    file;
              url     ./doc/source.200kbps.768x320.flv;
          }
          ffmpeg      ./objs/ffmpeg/bin/ffmpeg;
          engine {
              enabled         on;
              vcodec          libx264;
              vbitrate        2000;
              vthreads        4;
              vprofile        baseline;
              vpreset         medium;
              pix_fmt         yuv420p;
              acodec          no;
              oformat         flv;
              output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream];
          }
      }

      ingest template {
          enabled      off;
          input {
              type    file;
              url     ./doc/source.200kbps.768x320.flv;
          }
          ffmpeg      ./objs/ffmpeg/bin/ffmpeg;
          engine {
              enabled         on;
              oformat         flv;
              output          rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream];
          }
      }

      play {
        gop_cache       on;
        mix_correct     on;
      }

        dvr {
            enabled on;
            dvr_apply none;
            dvr_path ./objs/nginx/html/[app]/[stream]/[stream].[timestamp].mp4;
            dvr_plan segment;
            dvr_duration 1200;
            dvr_wait_keyframe on;
            create_dvr_timeout 30;
        }
        snapshot {
            enabled on;
            ffmpeg ./objs/ffmpeg/bin/ffmpeg;
            snapshot_timeout 30;
            engine {
                enabled on;
                iformat flv;
                vcodec mjpeg;
                vparams {
                    vframes 1;
                }
                acodec an;
                oformat image2;
            }
        }
    }
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: autocv
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2024-01-12T04:55:54Z"
  labels:
    app.kubernetes.io/managed-by: Helm
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data: {}
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/managed-by: {}
    manager: helm
    operation: Update
    time: "2024-01-12T04:55:54Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        f:mmgw-conf: {}
    manager: kubectl-edit
    operation: Update
    time: "2024-01-12T04:59:16Z"
  name: mmgw-configmap
  namespace: default
